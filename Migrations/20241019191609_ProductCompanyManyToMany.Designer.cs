// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241019191609_ProductCompanyManyToMany")]
    partial class ProductCompanyManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7a6f4d2-7bba-43aa-920a-f1c4574f8757"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("f8681d08-f9c9-4553-8d7e-f7d082f9148d"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("00ffb322-9cd0-49ba-95e2-8ed4fa3615f9"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("71b3fa6a-11c4-4d79-bb8d-9f4a4cf78027"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("9df3006a-3971-4025-a2a5-c1082b313973"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("4b53dbcb-4db2-4605-8506-1e88a602f694"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("96f62f04-edb7-445c-9626-452b757ecb2b"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("45a947a7-5e43-44bd-9a5c-ba742adea69a"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("705ed7ff-0de9-42b9-a5d8-8679e94ff5b9"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("91bb85e1-e6a5-4401-a892-4902ba487641"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("35bb88b3-cc41-4ead-ab18-94bf0dd7299d"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("1e7312f4-bb44-4a4f-a4b8-263abe942dc0"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("f66ca15a-2f0a-45e1-8950-fdf58a25f1bd"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("dd7d0571-ca79-4069-91ea-6ec036b3dee5"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("82ded2de-3cdc-4fec-8bd3-c2681c9e1721"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("2d22f2ca-9ccc-4dfe-b2c0-14c96655e700"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("05445886-41b0-4c73-b140-d9e21661f799"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("d4a48abd-7c76-48d2-bd44-a3671e58ab4d"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("3801ec5f-0cd5-4b59-8b86-e4835fed223b"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("b7fcfbbe-7c6d-4d6f-a0f7-155cfbef39bf"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("e016ed9f-009f-4b62-be5d-a0d4f0c62602"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("b4b937f5-9685-461a-9324-f5decfd00bb4"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("1fe86a56-355c-40a8-876e-4e2fdad77f39"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("eef107b6-442a-4d54-acc1-d4297c3452aa"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("9486af81-2b9f-4a3d-a858-a358b8839ffa"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("cb10d3cc-c89b-4703-aec8-dbec5c1be065"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("c7925be7-0f4b-4fa7-ab4e-99a4e4e1fb38"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("3cbe18fd-d27e-459e-97ad-89b058d630ad"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("516755a5-5b52-44ad-813f-597b85586676"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("28beea88-dfe1-431d-8d0a-f2c7fa4ed8b5"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("dc1fc6c6-73c2-48b2-b7cf-f52c874eed76"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("173ecca3-08da-463c-8488-8af653697e23"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("034943a4-6d95-4f7a-a339-60895ca53fb0"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("70ba8c54-aae5-4da1-a2ef-ca9a659e2b54"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("844fb9ed-e9f2-4c10-a8d1-2a373b888c06"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("adb86f24-420c-4bd6-a937-5b28afca2d96"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("2d9ea9f3-2450-4b71-9750-7f218fb6acda"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("bbce200c-4270-451d-8952-7859e91e3830"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("47ce2e9f-b015-4294-81ca-94e3953c914b"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("f545fa14-56d0-4fed-9498-29697032bd8d"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("55745538-d40c-486a-b2d4-ae06bef25082"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("4850c224-29d1-4473-b9fd-9b83dae354fd"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("e7446a18-9d7f-4d32-8a24-33df209e6555"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("96ea4045-76a7-4856-bdf2-fc96d4e02c27"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("1820561d-9bba-4350-b733-5368091df97b"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("573b49d9-76b3-4c58-a69a-f8b471b6cdab"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("eb1df49a-a720-45c8-8202-9a87446527ab"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("f6003682-8132-4707-9bd5-06f6d533409c"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("0865607d-4139-4128-8234-c1eb9fcaa89d"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("7693ec9a-7fb8-4877-8176-f94400acd89e"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("1b083b22-e089-46eb-b8ee-d3ace57a098d"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("e26d8362-1a32-44d9-b077-68f20d14dea6"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("7990e5aa-07c1-4d3a-87b7-30aab10fa5b7"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("051399f6-2318-4abe-a14f-4c728d16e244"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("eccdc33c-84ea-447b-953c-5f2b92c20271"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("eb7ddb40-c0b2-4ca5-a0ce-ff9450619e1e"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("edcef169-f32e-4f25-96dc-ab10945b253d"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("5070ef43-4f96-4805-8af1-6d820ffe3b42"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("08029745-75ab-486b-9531-83a5b0f56f24"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("5a593281-2a73-4e6f-91a0-7220b8ab6af1"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("50a2532f-e434-46aa-9ad6-a3dfc65f4873"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("53914794-fdfe-454e-8084-97cfa582a623"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("e40c38df-69bb-4e5d-8ee9-6e334f1a09d9"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("7fb50c61-bb51-48c1-8253-38b7d72a977b"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("fc021cfe-1a5a-4920-a2db-bd37d8c2b42f"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("e70a866c-3da3-4f4b-b805-77f01c61284c"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("2cc2082d-f8e6-4950-b919-c65c99e9179e"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("7dc38565-d5c3-4f3c-9d6b-e8de395e3ff0"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("0282fca5-da2f-42d6-bd6c-e88a32c0c02e"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("7f24eb38-c1c3-4ee2-bb2b-fdd9a92b2b83"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("cba9160f-98b5-431d-a8ae-9bb557969bae"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("cd13711c-19a5-44fc-bb78-40603518fc6a"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("a1c7a556-45ab-482d-921c-6a6d225704f3"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("2e0916a6-8132-4663-afc3-5e82cf859b6b"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("923f1fc7-eda4-4c80-bd41-c614e76345da"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(4921),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(4935)
                        },
                        new
                        {
                            Id = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(4963),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(4977)
                        },
                        new
                        {
                            Id = new Guid("a46a2c92-a386-4e8f-b47d-8abecd242914"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5014),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5028)
                        },
                        new
                        {
                            Id = new Guid("113e3004-76b3-4a28-a4e2-c6135914eb11"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5062),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5072)
                        },
                        new
                        {
                            Id = new Guid("d1bf02fc-ee77-4993-bb0d-51cd0041f8d5"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5105),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5115)
                        },
                        new
                        {
                            Id = new Guid("25cf611a-119a-4cc7-9d60-82710db2c73c"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5148),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5163)
                        },
                        new
                        {
                            Id = new Guid("748520d8-f493-460c-874d-ef0503d5106b"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5192),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5207)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductCompany", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.HasKey("ProductId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductCompanies");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8821909d-343c-4052-aa76-3fdfe6d265b9"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5572),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5586)
                        },
                        new
                        {
                            Id = new Guid("74320894-bf4d-4843-a6f0-5fbcd6f50067"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5618),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5632)
                        },
                        new
                        {
                            Id = new Guid("42fe690f-dff1-4727-804b-257eb2efa4b2"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5665),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5679)
                        },
                        new
                        {
                            Id = new Guid("2377552c-b0c6-4542-9ac4-71b0851683d4"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5712),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5722)
                        },
                        new
                        {
                            Id = new Guid("e885b356-abab-4127-9145-d0342af77c1e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5755),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("91eda985-20ca-4b8c-a815-1b94be9eed38"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5769)
                        },
                        new
                        {
                            Id = new Guid("58972642-a610-483b-ac1e-e6e641eba440"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5803),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5817)
                        },
                        new
                        {
                            Id = new Guid("7a14684a-2a1f-44a3-8a76-f65b468f408e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5851),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5865)
                        },
                        new
                        {
                            Id = new Guid("9cd724ca-95c4-409b-ac90-78c3fc76c47e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5898),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5908)
                        },
                        new
                        {
                            Id = new Guid("a795010f-438a-44a2-aeec-d4697947753e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5942),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5961)
                        },
                        new
                        {
                            Id = new Guid("07cd265c-4220-4444-b35f-decd5b0d6619"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5984),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("8c2dd92a-03d6-4d8c-af45-3346ddb8f8fe"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(5998)
                        },
                        new
                        {
                            Id = new Guid("f313068d-6212-4602-8d13-2dcee7348db1"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6027),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("a46a2c92-a386-4e8f-b47d-8abecd242914"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6041)
                        },
                        new
                        {
                            Id = new Guid("00d97da3-5013-4842-aa9e-d3d344671f19"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6127),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("a46a2c92-a386-4e8f-b47d-8abecd242914"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6137)
                        },
                        new
                        {
                            Id = new Guid("0d27b32c-50b7-4e84-ad02-512dab3326e0"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6170),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("a46a2c92-a386-4e8f-b47d-8abecd242914"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6185)
                        },
                        new
                        {
                            Id = new Guid("a39ca185-896e-4204-a0fc-ecda89042796"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6209),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("a46a2c92-a386-4e8f-b47d-8abecd242914"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6223)
                        },
                        new
                        {
                            Id = new Guid("85666865-f177-4d11-8e38-ad3a50700037"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6252),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("113e3004-76b3-4a28-a4e2-c6135914eb11"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6266)
                        },
                        new
                        {
                            Id = new Guid("3bb0b472-7c5c-4280-8954-4adc22b2fb76"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6294),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("113e3004-76b3-4a28-a4e2-c6135914eb11"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6308)
                        },
                        new
                        {
                            Id = new Guid("bca83898-9333-4991-ad77-488fe45f7f1e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6341),
                            Description = "Media collection",
                            MainCategoryId = new Guid("113e3004-76b3-4a28-a4e2-c6135914eb11"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6356)
                        },
                        new
                        {
                            Id = new Guid("d2805996-9e87-496b-b3cb-235aa026de3f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6389),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("d1bf02fc-ee77-4993-bb0d-51cd0041f8d5"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6403)
                        },
                        new
                        {
                            Id = new Guid("45cc336f-dcb3-470a-9001-c9fbaabea208"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6432),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("d1bf02fc-ee77-4993-bb0d-51cd0041f8d5"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6447)
                        },
                        new
                        {
                            Id = new Guid("9583b492-16b1-43fb-85f3-0b77c98abf1c"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6480),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("d1bf02fc-ee77-4993-bb0d-51cd0041f8d5"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6490)
                        },
                        new
                        {
                            Id = new Guid("9a078370-4ed4-4800-aaa6-45a1a7584291"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6524),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("d1bf02fc-ee77-4993-bb0d-51cd0041f8d5"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6538)
                        },
                        new
                        {
                            Id = new Guid("9eb4cdeb-5b75-4ac0-b2b6-1445fbdb3bcf"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6571),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("25cf611a-119a-4cc7-9d60-82710db2c73c"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6580)
                        },
                        new
                        {
                            Id = new Guid("966a451a-1d4c-40e0-84d1-c81f275396d2"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6609),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("25cf611a-119a-4cc7-9d60-82710db2c73c"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6623)
                        },
                        new
                        {
                            Id = new Guid("886df892-eee1-4aca-946f-2873de3c1b51"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6651),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("25cf611a-119a-4cc7-9d60-82710db2c73c"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6666)
                        },
                        new
                        {
                            Id = new Guid("cfef1b6e-b90e-439d-8e4d-08d8135ccf36"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6699),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("25cf611a-119a-4cc7-9d60-82710db2c73c"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6709)
                        },
                        new
                        {
                            Id = new Guid("af812318-d220-40a7-8301-89b67df2586f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6742),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("748520d8-f493-460c-874d-ef0503d5106b"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6756)
                        },
                        new
                        {
                            Id = new Guid("6fccb3bd-b9e9-424f-99c8-5cc152776831"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6785),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("748520d8-f493-460c-874d-ef0503d5106b"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6800)
                        },
                        new
                        {
                            Id = new Guid("74a28754-887f-41c2-bb66-d508411d5d43"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6834),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("748520d8-f493-460c-874d-ef0503d5106b"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 16, 8, 654, DateTimeKind.Utc).AddTicks(6843)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a408b5f0-8a13-458e-897c-310ad60ac20a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "30de0ac3-53c0-4db9-a75b-802b4a1e04e1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "1199aed2-9165-4967-8460-d8cfd3063f14",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductCompany", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Company", "Company")
                        .WithMany("ProductCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductCompanies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Navigation("ProductCompanies");

                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.Navigation("ProductCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
