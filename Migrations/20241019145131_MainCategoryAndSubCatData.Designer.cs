// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241019145131_MainCategoryAndSubCatData")]
    partial class MainCategoryAndSubCatData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4b6f530-b7ea-4ce9-a6ae-84debe069b68"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("56d248c6-c0a5-43db-8d17-df45597b623f"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("551ba1ed-dd00-4427-90e1-07ce72115a06"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("8ae78824-ea65-45cf-b9d9-8e78344646c1"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("252b38ba-3f51-4bae-8a06-2a9f570fdd76"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("f61672a5-674d-4f02-a6ec-ded9152778c8"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("ac513a66-ffd9-4020-80af-45d2ee304fdc"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("fcc663cb-c917-42af-b340-2f3712831094"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("1d6f53e5-c2d9-4764-a544-439b61777dff"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("039b1ccd-9f0b-443b-964a-b3546442d3d0"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("0bcc8144-d37a-4cde-8081-dd26e941fd0e"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("47bcf7f6-3886-444a-8854-c8527c25342d"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("3b18fb86-d3eb-4595-853c-8789b1116e1f"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("0a3cf23c-1b0e-4f64-bfc8-d25b5f4cb06b"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("0daea3d0-2f31-49e8-af71-4139264aef92"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("10f48b33-0dc8-49bc-99df-1683dba5f763"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("8d699ebe-4163-4b68-9fa9-395a9bf020de"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("c9455045-259a-425c-825c-3560dcfd2550"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("64837635-b190-47ba-91ee-b2475886e2d8"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("2c7278c1-8a19-444a-a5f8-7dd04625ea2d"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("bb46505e-bb3a-43a9-ba8a-443cec7abff0"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("95201814-a855-40e3-9963-86cef3e0d786"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("01e8af7c-2e08-4c7f-829e-0d134b573181"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("caddfe54-6131-436e-9a39-de39c29d627e"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("6926f14d-ac30-4b03-ab21-34314a6e2b47"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("82c99a04-7b21-4767-a031-1a9b886b9ff6"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("4ecec32a-8771-4145-8ad9-402602bbd7a4"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("8a80c595-cb0d-430f-8059-ee27a0f51c28"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("049ac00c-e02a-436f-96c7-6c015cfe923c"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("5b323a56-3c88-41eb-88b5-d4a4fee3d492"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("30e72856-6ada-47fa-8460-114bb15ef8f0"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("3a8f073a-cf9e-4e1b-8145-f3bf761c670b"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("1cc3d1d1-7e75-46fb-b6a5-a8d74e52610e"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("12ca03ab-c79f-49c3-ade4-8cd22674fb71"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("8648b666-3ea7-4168-86c0-9319ab850013"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("c623e918-d2c8-4cd0-a122-a943a8731640"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("8f309ace-9a46-4c09-adb5-d6e5a4c4c00e"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("9cffa59b-56c5-404c-9336-22f244aa49f8"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("652ebb2d-0dec-4d46-88c6-9d6f1ebcd5f2"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("06172072-aed3-4ce8-8c2b-e6ada87d23bc"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("4a4748a0-37eb-467b-95b1-4e9bc7b91b27"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("46b9becc-27f6-4624-8338-7dac71f13c55"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("69864530-7941-4233-98bb-9ccff43a9315"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("68b96b9e-3d78-4434-af65-bd4b989fcd7f"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("b10dc1d2-66cd-4a03-931d-5dcb091f1041"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("d1cb95a4-a4e2-45f5-8383-255216bde8bf"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("bed781e4-ebfa-4553-9a9f-d9af3d3b5e66"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("8f7c10b1-6505-41e4-9039-ba0b433d545b"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("588088e6-243e-49dc-902a-3f6b761e83b8"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("0b1af892-e326-4b6f-9bf2-b8c835dbbf7b"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("46c61364-9b63-4c98-b307-6c722d674a19"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("1f7317db-0100-4b98-bd6d-40ec079e858d"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("dd28522c-8c11-4f5a-a276-4cc059507c2b"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("ede4ebdd-1cce-4427-8d69-b086a27e48eb"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("4c41c89d-fefa-4d05-b08f-d8815a1b0c89"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("e8ddcad7-a86b-410a-8433-070a55e2d41f"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("b16d717d-7205-4ed6-aed6-d0883237b7e4"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("fe61f6a5-5e2d-4467-bcfd-1083c214fd0c"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("4bc6d1a8-488c-4c8c-bce8-050333f6a773"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("9aac02f1-3d9d-4263-be8e-d7e4d1852ce3"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("e4006eb8-590a-469a-a1fe-e85c070a2f62"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("a1edd42e-b20b-425c-840b-aec04aaa69f4"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("021ae79e-650a-4c1b-a909-2077d4c17a25"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("586c3916-b563-45ef-bbc0-90a358e77d7a"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("ac71f8a5-8e56-4c42-8956-e01542e55ade"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("7d495f90-0d9a-4669-a132-c612f8b3b438"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("75aed6cc-8388-4fb7-8b02-a596576f7c2f"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("3f4aee6c-c71f-484f-b636-a3e0cfb66416"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("418ab5c7-62c0-417e-8b1b-ae41fc24a0dc"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("e7f04a37-fc5c-448c-962d-c994eec2ee4e"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("ed0ef0bc-fbed-45bf-812c-06ed83dc7783"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("cade31cb-0b33-4660-aeb4-137f0e3df053"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("b945f85b-d707-46c8-a87b-fd959ccf5463"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("8b18522a-5d4a-4665-8897-fe200c100242"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("2a4fed19-61f6-49a0-be3f-3c063f8fa202"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1870),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1885)
                        },
                        new
                        {
                            Id = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1913),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1927)
                        },
                        new
                        {
                            Id = new Guid("e566e3ed-9885-4975-88bb-fe4d7b37635a"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1954),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1968)
                        },
                        new
                        {
                            Id = new Guid("80795018-a1b2-46a9-a759-779634e5d2a4"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(1996),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2010)
                        },
                        new
                        {
                            Id = new Guid("3e99a64a-72e9-4b03-a9c0-d7f2509d3a3d"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2039),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2054)
                        },
                        new
                        {
                            Id = new Guid("20c604e9-d4d5-4f07-b555-817ea446e55e"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2082),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2091)
                        },
                        new
                        {
                            Id = new Guid("d89231a3-0efe-4cf4-8e6a-0d91fb61b97e"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2125),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2134)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcada86e-714e-4015-8b21-7c1d1d3229ef"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2325),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2339)
                        },
                        new
                        {
                            Id = new Guid("448d2c52-8ea3-497c-acdd-ba1f417a882c"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2368),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2382)
                        },
                        new
                        {
                            Id = new Guid("13f57966-55b6-4708-91cb-702ed91e888a"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2411),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2424)
                        },
                        new
                        {
                            Id = new Guid("683c5a26-5180-4bc2-a2fe-732a86f90533"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2454),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2464)
                        },
                        new
                        {
                            Id = new Guid("970f4c19-2353-4b3c-b3fa-32e0d8a70e20"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2492),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("331b122b-4c4a-41bf-a73b-0410f391e0df"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2507)
                        },
                        new
                        {
                            Id = new Guid("53e9cd27-b13a-471b-860d-744dd9ec3dc7"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2536),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2550)
                        },
                        new
                        {
                            Id = new Guid("94e6b7d3-3c5c-41b9-a8f9-66a98039618a"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2579),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2593)
                        },
                        new
                        {
                            Id = new Guid("c0ebef0c-5f40-4342-ad35-e8d493abc9ba"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2621),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2631)
                        },
                        new
                        {
                            Id = new Guid("3dfc9978-78a1-4ecb-ae9b-087ebd9e0960"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2664),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2673)
                        },
                        new
                        {
                            Id = new Guid("6cb59aa4-e947-40e4-a6b3-9a2fdf164c0c"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2702),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("7dd7bbcb-536d-4765-8f31-e7bad14a0685"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2716)
                        },
                        new
                        {
                            Id = new Guid("af843f55-32be-4600-a68a-a94fa02b63c1"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2744),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("e566e3ed-9885-4975-88bb-fe4d7b37635a"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2759)
                        },
                        new
                        {
                            Id = new Guid("be87b7cc-a9fd-4aae-9b2a-1b574ea01420"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2788),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("e566e3ed-9885-4975-88bb-fe4d7b37635a"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2797)
                        },
                        new
                        {
                            Id = new Guid("c201ce3e-284c-4055-aa2e-17b3509b8572"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2884),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("e566e3ed-9885-4975-88bb-fe4d7b37635a"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2893)
                        },
                        new
                        {
                            Id = new Guid("72380e77-11b2-452c-a01f-a26ec6fef49a"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2917),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("e566e3ed-9885-4975-88bb-fe4d7b37635a"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2931)
                        },
                        new
                        {
                            Id = new Guid("8f81e4fd-0297-44d5-896c-7b8f5316e929"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2965),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("80795018-a1b2-46a9-a759-779634e5d2a4"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(2974)
                        },
                        new
                        {
                            Id = new Guid("69175f01-0d14-4fab-919e-2bc5b161a6d2"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3007),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("80795018-a1b2-46a9-a759-779634e5d2a4"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3021)
                        },
                        new
                        {
                            Id = new Guid("3c0249ed-2e4d-449f-8650-a4aeddba66fb"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3054),
                            Description = "Media collection",
                            MainCategoryId = new Guid("80795018-a1b2-46a9-a759-779634e5d2a4"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3064)
                        },
                        new
                        {
                            Id = new Guid("3bd43b0c-9a84-4e75-8fc9-e0256c5a7a00"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3098),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("3e99a64a-72e9-4b03-a9c0-d7f2509d3a3d"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3112)
                        },
                        new
                        {
                            Id = new Guid("c4499f91-a419-4c0b-be21-edfc13679c36"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3142),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("3e99a64a-72e9-4b03-a9c0-d7f2509d3a3d"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3156)
                        },
                        new
                        {
                            Id = new Guid("7f5aa0ee-a294-4c22-a94a-542ecc3c988f"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3189),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("3e99a64a-72e9-4b03-a9c0-d7f2509d3a3d"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3198)
                        },
                        new
                        {
                            Id = new Guid("142af760-6b9b-404d-8e54-780dcc2f6ed2"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3231),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("3e99a64a-72e9-4b03-a9c0-d7f2509d3a3d"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3245)
                        },
                        new
                        {
                            Id = new Guid("688bb8a3-ce75-483e-8a8e-9eca96c91656"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3279),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("20c604e9-d4d5-4f07-b555-817ea446e55e"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3288)
                        },
                        new
                        {
                            Id = new Guid("f243a862-cbda-4cfc-b369-d8e99cc130b6"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3322),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("20c604e9-d4d5-4f07-b555-817ea446e55e"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3336)
                        },
                        new
                        {
                            Id = new Guid("7b2a5a93-54ee-48aa-b917-ab2f7aa742b9"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3369),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("20c604e9-d4d5-4f07-b555-817ea446e55e"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3383)
                        },
                        new
                        {
                            Id = new Guid("2077e424-360a-462a-ae17-740ee72bdd02"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3413),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("20c604e9-d4d5-4f07-b555-817ea446e55e"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3427)
                        },
                        new
                        {
                            Id = new Guid("acea6838-9903-4e5a-8f17-0588103dc7ca"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3457),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("d89231a3-0efe-4cf4-8e6a-0d91fb61b97e"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3471)
                        },
                        new
                        {
                            Id = new Guid("0d566ded-9ca1-4575-815f-ae4770317e60"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3504),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("d89231a3-0efe-4cf4-8e6a-0d91fb61b97e"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3513)
                        },
                        new
                        {
                            Id = new Guid("95d9d736-04e8-4f66-a783-8af9acebbd69"),
                            CreatedAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3646),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("d89231a3-0efe-4cf4-8e6a-0d91fb61b97e"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 19, 14, 51, 30, 847, DateTimeKind.Utc).AddTicks(3660)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5ada442e-52ac-4af9-b953-f4ae1e288c92",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ad1c1a09-55d7-4a01-a909-d586b297611d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "888de25e-d0fa-4e94-9674-fe15386b31c6",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
