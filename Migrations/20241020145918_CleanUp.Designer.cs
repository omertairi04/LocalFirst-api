// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020145918_CleanUp")]
    partial class CleanUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3565962c-de4c-4334-82d4-fa7fcc59d1df"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("e1492641-8a21-42f9-b3b4-2f23a3c76042"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("86766fa7-93d0-4be5-adaf-586226dca823"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("91958e2b-0077-489d-a649-3e1848f1bde9"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("27b5977c-812b-4d59-ae64-4246e84ae4ee"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("e743d008-c814-465e-b64b-9600eb50ec28"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("9ad82352-b8d6-436a-acd5-2917cd8ef22b"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("00374ec8-93f0-43b6-a398-b6b56b37cc4f"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("c1f7848c-faea-41c6-98e0-352c8f97b3ce"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("074d0772-fe70-4250-aba1-c8be9a4bec0d"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("ef784190-2f7b-4e62-9c12-e0100a7df0f9"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("9880a1bf-9881-4d18-8581-71452c3e0dfb"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("c1553cd5-b1c6-435f-8107-d4ad8bccb1e7"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("6eb42caa-63ff-4fa2-9af8-40958c4572ea"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("2bbce22c-154f-4390-b26d-088ec107b967"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("9e24dec6-ac1c-41ec-856f-1008a436ea3b"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("33da739c-4b05-4c0c-ac31-025aae7a9f55"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("672adc6c-d9e4-45da-8ef3-35ec0205e0e6"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("3bdef7aa-fcf8-44ba-887f-fb2a850fad2c"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("d90ea2b7-90a1-42d8-8b80-0f26c196d01f"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("4d5ce21b-b1ae-41e1-bf94-dcbcc1da19c8"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("c408dadf-1931-4085-9807-c4cb652054c9"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("31785a65-39d6-424a-bb82-4370d7d04d34"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("c46a07a6-f739-4c04-9c0a-fee028566f23"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("82f4c35f-5741-438e-9284-694d7364c11e"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("aac79267-1914-4ad3-9f0d-a8358e5ea859"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("e0423028-ed1c-435c-b8f2-f8f938b51e0b"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("5b22942d-51da-45fb-9c0c-898b938f9b1f"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("23823a8b-2188-4e56-9c08-e519c79eb5a2"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("673c91dd-153c-48f0-945e-a6a961cf0375"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("e528e837-cc2c-40db-b237-8493f8db192c"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("12f68cd4-909e-4c99-b19d-1140585d433f"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("978f98eb-c4fd-4a56-a454-23029d99aee5"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("df587988-acfa-4ebb-a17b-f761bc3240b4"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("b4cec4d8-0967-4620-b850-b4465e3db7b6"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("561b519e-5412-422e-b518-451ecb36abd3"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("242038a8-60ae-4aa4-a420-86b37329fa34"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("e5847324-21a5-45d7-9d63-f3d5e1035936"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("903147b9-98fa-4267-9f73-53a82699f1c2"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("aa2ce173-f29d-4724-9d60-74d3a8718bf0"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("da5acf58-0390-48e5-8efd-6b4ad20c5d59"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("8e64aa7d-96dc-471d-9c44-d2afe4f5e81e"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("eea89624-29b4-498b-96d2-21d9bef29728"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("3c4d4698-9e75-4f0e-af08-07ad96a0fadb"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("43adffde-9c85-4333-b19f-436ea36dd793"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("ce2fdc66-4140-47d2-a264-5f34be08e33b"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("2242485b-67a6-4132-8297-27cf92d8760d"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("93e9248d-9632-4d91-b91f-054698c6ccde"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("9effc946-a7f5-4a93-9b83-2e78151eccec"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("17850ae9-8c60-4709-a904-a569447a83a0"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("b9ea3ef7-0632-4076-9f64-c99e985bbd7c"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("d0888be8-c45b-4e6a-be0f-7e8917de3330"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("c7aa4afd-99cd-46d8-92e4-429261102291"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("babd51d8-13e0-4339-a01a-21f37f575be4"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("b258d598-7447-46a3-9c54-bb784b14d2ea"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("821db04e-f03d-4676-a249-2a78cb5c323b"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("0a06ff79-9120-47d0-bcf4-d75c690b7098"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("e937f74b-3f08-4133-b15e-d9dc7f2f1c32"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("6c1cc393-7da4-467f-98be-71154e0069aa"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("16038a7c-62b4-4b10-8ba9-eaa9353aa7ac"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("0c64a7a9-1ae3-40a6-97bb-566c0cae02ca"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("f5072ea4-5ccc-4e92-a082-fd52e884d9da"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("162efc63-3827-4465-bec3-dc99bf4449f7"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("09d769d9-f2ed-4ae7-9eb0-356efaba78b5"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("7ae2eacc-543a-44bb-ab7a-f031fe791533"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("c5929778-8fe8-48bd-bd3b-9e81fa3565d5"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("f8519b5e-ab3e-4a8d-a9ae-98e699262cd6"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("b9975e82-ec51-4292-aaed-8f8955d6b8a3"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("a40068a2-d583-4c93-b840-30d0ca555d0a"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("cdec545e-31ef-44d4-ac6b-a6e699f5281b"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("0c5a6c6b-ac4d-427b-996e-c2339ebdb233"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("8965a620-c7e3-4076-b870-290f5d6809c6"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("1fa2e29c-f936-476c-aac5-68b97620463f"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("1e457d82-8cae-41b7-b47e-4f3e45a04d5b"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("40f015f4-7065-4053-bf2e-2c07555096e5"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(346),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(360)
                        },
                        new
                        {
                            Id = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(389),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(399)
                        },
                        new
                        {
                            Id = new Guid("ad25175c-a5d3-40da-abad-5ee366df7056"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(432),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(441)
                        },
                        new
                        {
                            Id = new Guid("37b09986-d114-4e68-9c63-b7f4a2973991"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(470),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(485)
                        },
                        new
                        {
                            Id = new Guid("272455ea-647e-4fdd-95a4-f3fec2cd084d"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(513),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(527)
                        },
                        new
                        {
                            Id = new Guid("64aff739-64a4-4887-81a3-2c030a037674"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(555),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(569)
                        },
                        new
                        {
                            Id = new Guid("801d1492-d167-4072-aab3-bea94438edfd"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(598),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(608)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b512dda2-b4f7-4f6f-8b8d-5ae66aadee3b"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(842),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(856)
                        },
                        new
                        {
                            Id = new Guid("0059ebbf-8b1c-47af-8d95-8641ad63414d"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(884),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(898)
                        },
                        new
                        {
                            Id = new Guid("3b7638fb-27cb-4e23-9da1-52be699d581c"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(927),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(937)
                        },
                        new
                        {
                            Id = new Guid("350f6479-bb66-426d-9e6d-ead934704a86"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(971),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(981)
                        },
                        new
                        {
                            Id = new Guid("22b2f2da-778c-41bd-b07b-160c8d27fcbc"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1009),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("64955880-6e01-4007-8dab-f80807028d3a"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1023)
                        },
                        new
                        {
                            Id = new Guid("5be4f0dd-8345-4463-85d0-1d6f135e0396"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1052),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1062)
                        },
                        new
                        {
                            Id = new Guid("8fb303ad-3922-478b-ae05-f4fd32a07082"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1094),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1104)
                        },
                        new
                        {
                            Id = new Guid("76dff71a-ab52-4a52-b2f3-aafbd5abc1d2"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1132),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1147)
                        },
                        new
                        {
                            Id = new Guid("8575689d-e61b-471b-a328-adee7609f4b4"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1175),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1189)
                        },
                        new
                        {
                            Id = new Guid("d69cda60-3312-4622-a4d3-47812474f73b"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1218),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("b2ac13a6-fc0b-4329-96d6-effcf4aa4208"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1232)
                        },
                        new
                        {
                            Id = new Guid("a0c0d132-5d13-4773-bf3e-8d8342c593dc"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1261),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("ad25175c-a5d3-40da-abad-5ee366df7056"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1270)
                        },
                        new
                        {
                            Id = new Guid("2bbc664a-0643-453c-9225-8f49ea431186"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1305),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("ad25175c-a5d3-40da-abad-5ee366df7056"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1314)
                        },
                        new
                        {
                            Id = new Guid("f1daf3d3-5efc-405a-b34d-263fe37451e4"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1343),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("ad25175c-a5d3-40da-abad-5ee366df7056"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1357)
                        },
                        new
                        {
                            Id = new Guid("e2dcf768-2347-404b-a919-bab16280fc9f"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1386),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("ad25175c-a5d3-40da-abad-5ee366df7056"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1400)
                        },
                        new
                        {
                            Id = new Guid("9cf8a091-502b-4737-958b-8fa8968a4b07"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1428),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("37b09986-d114-4e68-9c63-b7f4a2973991"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1442)
                        },
                        new
                        {
                            Id = new Guid("f366ba27-effb-43b9-a114-c0fe57b9ac25"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1471),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("37b09986-d114-4e68-9c63-b7f4a2973991"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1486)
                        },
                        new
                        {
                            Id = new Guid("34f9e904-20a0-4977-b0d4-6ad1ab87f435"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1513),
                            Description = "Media collection",
                            MainCategoryId = new Guid("37b09986-d114-4e68-9c63-b7f4a2973991"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1523)
                        },
                        new
                        {
                            Id = new Guid("c91534ad-ffab-4d90-976c-9fb3f3248025"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1557),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("272455ea-647e-4fdd-95a4-f3fec2cd084d"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1566)
                        },
                        new
                        {
                            Id = new Guid("1624a33f-ba23-4460-b05f-943827af8dd5"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1595),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("272455ea-647e-4fdd-95a4-f3fec2cd084d"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1610)
                        },
                        new
                        {
                            Id = new Guid("d1856b31-fda8-4beb-8662-71b1fba4c755"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1639),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("272455ea-647e-4fdd-95a4-f3fec2cd084d"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1653)
                        },
                        new
                        {
                            Id = new Guid("5c330489-afe7-4c48-8e9d-443b70d7a404"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1682),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("272455ea-647e-4fdd-95a4-f3fec2cd084d"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1691)
                        },
                        new
                        {
                            Id = new Guid("6508c016-9303-465e-a8be-d9c8ab8bb328"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1724),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("64aff739-64a4-4887-81a3-2c030a037674"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1733)
                        },
                        new
                        {
                            Id = new Guid("df8130f1-f42b-4b52-82dc-83c22c6fc7de"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1766),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("64aff739-64a4-4887-81a3-2c030a037674"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1775)
                        },
                        new
                        {
                            Id = new Guid("5334ca3f-fda1-465e-ad2c-3f876d71adba"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1804),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("64aff739-64a4-4887-81a3-2c030a037674"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1819)
                        },
                        new
                        {
                            Id = new Guid("7701bf29-e676-4973-92f6-20f74488d3e1"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1847),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("64aff739-64a4-4887-81a3-2c030a037674"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1857)
                        },
                        new
                        {
                            Id = new Guid("e0d9fdfc-0d70-4cc8-9d7e-74414db18ad4"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1891),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("801d1492-d167-4072-aab3-bea94438edfd"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1900)
                        },
                        new
                        {
                            Id = new Guid("81d8f317-049e-44dc-b4b8-3891d165c3ed"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1930),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("801d1492-d167-4072-aab3-bea94438edfd"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1944)
                        },
                        new
                        {
                            Id = new Guid("0c45941b-27a9-4e3d-86a8-1193ea218e1c"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1973),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("801d1492-d167-4072-aab3-bea94438edfd"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 59, 17, 545, DateTimeKind.Utc).AddTicks(1982)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
