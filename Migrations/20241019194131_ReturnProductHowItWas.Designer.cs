// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241019194131_ReturnProductHowItWas")]
    partial class ReturnProductHowItWas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("254206b0-e9e6-41ea-bb3f-1600f68a6bca"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("2c6d70e3-af1e-4056-acec-19a68f12d5ff"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("2010d95e-3171-444c-ad27-dcde1f8c5e4c"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("f0aeb83b-0085-4e02-8785-819d042d56f7"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("1ab428e7-55be-4552-8b17-87bf7595b5bd"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("c9785c79-cc9d-468a-8358-b94b667f67ff"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("1845b229-848b-40bd-9c48-3ff8f9a0ea53"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("10f34136-6c8d-4110-b4c4-6f56f00c62a2"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("c20ca113-c854-4375-b7a1-ca6919258c74"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("979250ce-85d7-4511-be28-5950526e39e2"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("8bfac742-3f46-4f8a-a73f-9bdd50fcc8c0"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("1ac61cc7-3657-4785-96af-26002df6ce48"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("61381547-93cb-4bbf-b25b-abc629a07ad3"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("209b4be0-7e5a-409e-a5f0-c9de200983d7"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("3a4e4f4e-fdc3-4ae4-bfa7-62737454aad3"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("aec9b76d-bbd8-450a-b045-01e0b01def94"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("4edeebac-4a78-48c6-b519-34f0e4cadc88"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("4dae656c-d39e-4202-b7d8-bcf5300b84dc"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("2bd99321-295f-4c09-9325-b37f4c9503a3"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("cf5593e6-99dc-4c60-a957-db69b1ee3bbc"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("579b4e4c-825d-4720-957e-1ce164b290c1"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("877efe8d-0486-4fbf-b5b3-1d4fa9abf7d6"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("633cdd96-a7d2-4f77-be78-57481933820a"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("5e901c61-9c43-489b-ba8e-d34c24850250"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("c9532d3f-e9a6-4451-878f-3e70d5d1fdbf"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("322c30ab-cf67-4220-b042-b5d013b8c41a"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("2721a9c2-93d3-4cdc-869f-3ad96f0a788e"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("a775acdd-5ff8-4d49-aa35-5dc2cf28395f"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("89644846-8e41-4046-98ac-9e368522234e"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("9f4b6684-dcb1-4fac-ad54-c5db8a648c7b"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("285e2d08-3d0e-4823-9630-1e45098fd781"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("a818d228-90b6-4693-a270-a695864fe13d"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("eb54ccd9-4d24-49ef-a09a-ee4f4f711526"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("3bc3a162-ef8f-4d7c-8c8c-e9a209d942bc"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("ae84596b-ef67-437e-a047-25f1ed3e635f"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("67991323-9cfd-4bfe-a49c-27bde6bdf3da"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("ed37e295-3822-4171-958b-fe7c8d47c318"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("cafc1dfe-34ed-4e56-8c81-732ade27b789"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("c13f55e6-b0b4-46fc-a40e-71bda2def15b"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("9ca4e646-dc7c-4cef-9910-9c41d2d24472"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("5b56c27f-4d29-4a66-b61b-6155ca2acbe1"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("3b94f5c5-cfc7-420b-93c5-4b77961b6f5e"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("ceab29e5-8d96-4c8c-b8e6-7e4d6e858ae8"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("9a5f6153-b234-4a05-aaeb-b5460e8baca4"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("0becfe4a-048a-4230-bd3d-a2620f1ce537"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("b1d1b067-46d4-44b8-a31e-e094335cf81b"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("49c7b320-56f6-49e3-b9ac-1e8e050247d2"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("49377475-f76e-4a47-a917-1b2a243157ad"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("2e7a0ff0-b6aa-47ed-9ee5-5c1c8bc5f7b4"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("47b68a9d-0ad2-43c9-bfa8-99fd1d44b1d1"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("32fee302-d847-44ce-862a-47876b54770b"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("c08159f1-9f24-4906-b0a6-cbc7c5df3127"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("9d0e0bd8-180d-4368-a7b8-3f3875397418"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("b9becd7d-90dc-4896-b483-9b24d3d73c22"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("45a80f61-8637-4764-9185-d318c92ba116"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("ec643da7-8b9d-4b6a-a086-4ec0cef219be"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("ef05b341-6d07-4954-b089-ab4105fc3162"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("bea5860e-241a-490e-be46-1c430f89b8b6"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("ebd6581a-1986-4115-a5e2-c87d74442bec"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("ce9194d2-ab84-4258-8308-0a1807deb563"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("ac2829bf-2fc3-4fef-bcae-e115011bbe65"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("99e09222-0ac4-4ec7-9aa0-aab628064587"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("ef4b3589-a2b5-4249-82f6-fa2807cdddd0"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("5124b36a-54ad-478d-9c35-98269580c9a2"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("9eea8438-bc0b-4249-8ba6-2ceb79684f96"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("2301af82-668d-4864-a7e4-056b73d37254"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("02417e54-4e5c-4c30-8749-a7421670a0a0"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("83fd615d-e837-4d12-a141-efb6c96c473a"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("3262a072-c07a-4ac3-b012-2dbdaff1c810"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("a70b15e8-28f2-49d8-8285-0525d76fe5d5"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("d7b3ae9b-a304-410b-abd1-3a0618e29a92"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("ef958888-1d32-4540-a07a-5fff550a50be"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("fdbab9f0-4f38-4cb4-803f-308ace101a5a"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("2cde82aa-bdc7-40a2-ab54-4bfc79d1db65"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("b082744b-0d44-44ba-ad00-05a60085ba95"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2330),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2344)
                        },
                        new
                        {
                            Id = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2373),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2382)
                        },
                        new
                        {
                            Id = new Guid("4e0e028f-76a3-4e7a-9846-5bce87c42005"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2416),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2425)
                        },
                        new
                        {
                            Id = new Guid("52153771-a213-4fa8-bff2-bd2a5a821f98"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2453),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2467)
                        },
                        new
                        {
                            Id = new Guid("60cbe962-b534-4737-9b35-cecac8c30b2c"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2496),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2510)
                        },
                        new
                        {
                            Id = new Guid("ccd53bd1-3a29-4d0f-9912-98ea9788446b"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2539),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2548)
                        },
                        new
                        {
                            Id = new Guid("9afb2eb0-8e33-44e2-945a-700b2400de6b"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2577),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2591)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58b56466-2bdd-4bee-83fd-230c9f79cd7c"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2778),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2792)
                        },
                        new
                        {
                            Id = new Guid("3f4e0fc2-9287-4c9e-be60-70ab7bbed3d9"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2834)
                        },
                        new
                        {
                            Id = new Guid("caa4adaa-fa5a-49b7-ae15-999f37ec6e0a"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2863),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2872)
                        },
                        new
                        {
                            Id = new Guid("c28de2f0-043f-467a-9fde-1acb92668b15"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2906),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2916)
                        },
                        new
                        {
                            Id = new Guid("a4e326ad-62b2-4df1-a1a9-65177d0b8c1d"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2945),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("6f322fcc-dc55-4f70-9f94-41f5e54f930e"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2960)
                        },
                        new
                        {
                            Id = new Guid("b4c88688-5d4f-444c-845a-c6aee6504d4a"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2988),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(2997)
                        },
                        new
                        {
                            Id = new Guid("142f605d-fa83-40f0-ae5b-d9de5819165b"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3040)
                        },
                        new
                        {
                            Id = new Guid("baea09f4-141e-4b5e-ac15-2c007d2e251d"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3069),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3083)
                        },
                        new
                        {
                            Id = new Guid("7be3e644-0c23-4e64-ba6c-0196481b0b98"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3111),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3125)
                        },
                        new
                        {
                            Id = new Guid("3110ba90-e11e-4195-a18a-10c16b229cf6"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3154),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("dcec7825-bd7c-485b-93d2-c266b5813543"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3168)
                        },
                        new
                        {
                            Id = new Guid("02e5b7a1-16ef-4272-9e61-d4d8248cec4d"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3196),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("4e0e028f-76a3-4e7a-9846-5bce87c42005"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3211)
                        },
                        new
                        {
                            Id = new Guid("637d7a7d-3d17-431a-ae21-6b126adba02f"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3240),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("4e0e028f-76a3-4e7a-9846-5bce87c42005"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3250)
                        },
                        new
                        {
                            Id = new Guid("952f13b5-e5d8-4eb1-abb4-554bb4e65789"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3279),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("4e0e028f-76a3-4e7a-9846-5bce87c42005"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3294)
                        },
                        new
                        {
                            Id = new Guid("76942a32-cc42-4f05-84b6-d1ef35c57b9c"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3322),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("4e0e028f-76a3-4e7a-9846-5bce87c42005"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3331)
                        },
                        new
                        {
                            Id = new Guid("33c1d9cf-11b3-4bbb-9bf3-bde6e3a0f6f8"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3364),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("52153771-a213-4fa8-bff2-bd2a5a821f98"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3373)
                        },
                        new
                        {
                            Id = new Guid("28847399-0e9b-4395-9ef4-b23627542993"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3402),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("52153771-a213-4fa8-bff2-bd2a5a821f98"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3416)
                        },
                        new
                        {
                            Id = new Guid("0ac827d5-6092-47a5-9b3c-30111d141723"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3445),
                            Description = "Media collection",
                            MainCategoryId = new Guid("52153771-a213-4fa8-bff2-bd2a5a821f98"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3455)
                        },
                        new
                        {
                            Id = new Guid("4e9e6d5c-b04b-4cb4-b67d-260b1fd15ef2"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3488),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("60cbe962-b534-4737-9b35-cecac8c30b2c"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3497)
                        },
                        new
                        {
                            Id = new Guid("3d81e9ed-89c1-4d00-bb57-01c73d43b54e"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3526),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("60cbe962-b534-4737-9b35-cecac8c30b2c"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3540)
                        },
                        new
                        {
                            Id = new Guid("7ba079c2-e674-4760-aeb2-6a59af78c2e5"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3569),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("60cbe962-b534-4737-9b35-cecac8c30b2c"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3579)
                        },
                        new
                        {
                            Id = new Guid("90d562c8-20b9-4441-8646-7bea3d5af4d4"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3613),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("60cbe962-b534-4737-9b35-cecac8c30b2c"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3622)
                        },
                        new
                        {
                            Id = new Guid("057a9d66-69b2-41fb-874d-95e5408e1d80"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3651),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("ccd53bd1-3a29-4d0f-9912-98ea9788446b"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3665)
                        },
                        new
                        {
                            Id = new Guid("f05b7ce7-ee34-4638-a006-7fd320257895"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3693),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("ccd53bd1-3a29-4d0f-9912-98ea9788446b"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3707)
                        },
                        new
                        {
                            Id = new Guid("44a3b7e9-5d08-4edd-987e-b15fb98b19c9"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3736),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("ccd53bd1-3a29-4d0f-9912-98ea9788446b"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3745)
                        },
                        new
                        {
                            Id = new Guid("bacb661b-fc3a-422b-b80f-a5b48d3db413"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3774),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("ccd53bd1-3a29-4d0f-9912-98ea9788446b"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3789)
                        },
                        new
                        {
                            Id = new Guid("779d35c4-6285-4860-bd62-e4d59bf43f18"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3817),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("9afb2eb0-8e33-44e2-945a-700b2400de6b"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3831)
                        },
                        new
                        {
                            Id = new Guid("aa46b6f2-a4d4-4a61-8435-582b93600798"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3860),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("9afb2eb0-8e33-44e2-945a-700b2400de6b"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3870)
                        },
                        new
                        {
                            Id = new Guid("5506cfdc-06db-48d0-b857-b381a4eea1d0"),
                            CreatedAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3899),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("9afb2eb0-8e33-44e2-945a-700b2400de6b"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 19, 19, 41, 30, 512, DateTimeKind.Utc).AddTicks(3914)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6230b6c8-f6eb-4a58-aaa6-6e25f34541fc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8a2f2b92-f31e-4639-98fc-38ef6a2984d8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "77ff9c52-c74d-478b-bbd1-44781a746d18",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
