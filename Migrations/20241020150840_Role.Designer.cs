// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020150840_Role")]
    partial class Role
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8af2751-29f3-497a-813c-729461213c6b"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("fbf86d29-d160-4d11-b706-3b1615aa3ba6"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("025f4e3b-f41b-47d1-888d-4a6f3258503c"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("3b95a5aa-ca4a-45e4-9705-80c8f0da0cac"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("eab80c66-d40a-4314-8ab0-5371690e9af7"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("97e4a2d3-67a8-494e-bd59-41d0cff4264e"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("8ef1ae6f-ff2a-44cf-bbd2-20a50d078461"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("1a7d4053-d3e9-41fa-b53a-162be196b3ec"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("92335399-eb46-49d8-bf85-283c3e440d41"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("24918afc-33b8-4752-99cb-7d5bba753bc3"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("63600c9d-5085-47a0-83ee-c393100d3d47"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("7482c496-29c3-4df1-86ef-d80e900c6ba7"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("52dda469-cf00-4e21-991f-2868208434be"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("d5b1c065-47c2-4d33-a9ea-34822c7176ae"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("b7bf1e68-cf04-45d2-b97e-dc987f8276e6"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("8e03139a-dca0-4736-b318-279b99dc10f3"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("411e15ff-d9dd-487a-8ed0-b05885c9cc39"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("781518d3-077f-4613-9204-6ee0ae6b5943"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("cf7cfb7b-5c42-47b7-89ff-5bbd424b9ed1"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("2f60e1c2-5f4e-4237-afcb-eb78a5130e2a"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("812d80e3-f578-444b-8119-5132b596f856"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("d6aa4125-32fe-435c-918b-76e99a5df617"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("0893a4c1-56de-47d9-ae2c-6d42483b0f10"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("30a89fb8-fe3c-418c-b740-014b44f4b8fa"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("f6536eed-7d55-428a-81ac-e7f5ba36c6cf"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("8855ddb6-838c-4137-aefc-835ad9ed7e5b"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("b818537b-7254-45d7-bf3c-1e3243c4d049"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("5d6f447a-ac9d-4eee-a44c-bc48d431b89f"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("7f754f14-5613-4943-9360-514c3f725993"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("23c785bc-2f99-463c-91f8-fe7ca5aba7e6"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("ec61f45f-0c9f-4a0f-9df3-5038949511f3"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("4d2e4a7e-e714-4585-94f8-6c6bab6de651"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("cf6f66cc-c349-4c30-8b86-0ca459850931"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("7d2ce8db-e9eb-467f-8c31-b58765b8157c"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("166c5267-9506-4f5a-9160-4b7d918866a6"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("ec2eba68-0167-4bfc-b6e1-94a5e52636b5"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("e1ab486d-c21b-4df5-95ba-0e81f984c60e"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("4fbd66e5-a163-4782-b94d-3c6f84f7964f"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("477deb82-43f3-401c-92df-f9c03742cd1f"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("c14bd302-c7a7-4356-99a9-88cfb08f1eb2"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("94ae9912-9613-4b50-ba6d-285665da4809"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("ae58f204-7d7c-4f22-b51c-9571454230bb"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("9ffe3f15-e67f-4274-8675-850992592ed9"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("ed8263e0-7143-4715-afeb-6352ec115587"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("007670b2-0157-4f8a-bb42-9549b252290b"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("4ee9f14c-6ca3-4775-b5d7-aadec6ea8627"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("8e4accf9-b68b-4a77-8ad5-d5838a366417"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("e64187c5-ce61-4ac9-8d27-70314a97ee2c"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("fd482c64-66c9-498d-becd-7f73d77beadb"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("425e72bc-3bd1-4fb2-bae9-38674ac10207"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("914421f9-4aba-4aaa-9d43-1d765fc4d2ac"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("b924ea1a-0f02-4b1b-aec6-e66490b596a2"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("165be06c-257c-4dad-a381-cef0d0002730"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("06a2ef16-7b14-473d-957d-c15f344d7019"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("39e45ae7-18f4-421e-b3ac-b0a923d799b3"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("4eb2458d-03dd-47c0-a2a9-a00dd98ab1ba"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("03d2191d-90c2-4d37-bcc5-037a01d95e18"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("d69ee675-1e38-46a3-b0c5-1e3dc2dacf17"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("69ff8764-0fd1-4f30-b4dc-b671d0d33fbe"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("c5f2fc75-f50b-4844-898d-f2e0f4af35e1"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("91371956-03c2-4044-80ca-57efbcf795ab"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("42e2ddbc-f43f-4804-8714-888518853da6"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("892b4f0e-6db8-4859-9f85-1ea59b753251"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("f1d0b372-38f6-420c-aada-fcee76d3f48d"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("c50c1df2-3788-4ee9-9b3a-1c0eaade5de0"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("693a4ec2-e826-4340-b5cf-773250eda66e"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("82f0ce4d-177b-4798-9228-3c1f64b0b1c4"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("3e08b5a3-5005-460f-b9b3-9fd89e9930f9"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("74c9ab8c-8854-4545-8cb4-097d6c333acc"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("dc380844-2fe0-4831-932a-ded016d98b69"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("82c919f4-47d9-4a4d-88c9-f976f350987e"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("56e772fc-94b2-443b-a8d2-2407e3159581"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("c0d15b7f-c70f-4ecf-a113-3af6488a36ad"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("5146e8f2-68a1-4297-a855-1cc74cd5d675"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("d89c7b33-dd87-4508-b668-5ff20a89e561"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7840),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7849)
                        },
                        new
                        {
                            Id = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7882),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7891)
                        },
                        new
                        {
                            Id = new Guid("b5ab8629-0325-4957-8d14-90c0958a1237"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7924),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7938)
                        },
                        new
                        {
                            Id = new Guid("2953a775-a8e5-4221-aa90-76f67de9fc25"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7967),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(7976)
                        },
                        new
                        {
                            Id = new Guid("862b0000-7d7c-48e7-be79-10d23a400ab4"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8004),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8018)
                        },
                        new
                        {
                            Id = new Guid("a0e69d49-e7de-402e-8590-8552d69c07f8"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8047),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8057)
                        },
                        new
                        {
                            Id = new Guid("f5952b36-6c30-400b-98d4-ffee8329d0da"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8086),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8100)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab3801f2-3b79-45a6-8289-860e9f0dd3b3"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8286),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8296)
                        },
                        new
                        {
                            Id = new Guid("5c614bc8-852b-4298-a475-fcac70cd5e81"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8328),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8338)
                        },
                        new
                        {
                            Id = new Guid("dbef7c89-ee55-4a9d-b0b8-307d3f141f73"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8367),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8381)
                        },
                        new
                        {
                            Id = new Guid("1d929b69-e3cb-4905-919e-77b7934a6bc7"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8420)
                        },
                        new
                        {
                            Id = new Guid("0cec48ea-6edd-429b-8d5b-c224257cfd90"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8453),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("f3fc0e6e-3680-474c-8e6f-23308dcb0c4d"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8463)
                        },
                        new
                        {
                            Id = new Guid("c08fbfa2-3cce-4d0d-829e-e9587ef916de"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8492),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8506)
                        },
                        new
                        {
                            Id = new Guid("d54882ac-a732-4658-b9c3-d23f2897d9b5"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8534),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8549)
                        },
                        new
                        {
                            Id = new Guid("a8d47491-1f2a-4846-b908-a705ab524319"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8577),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8591)
                        },
                        new
                        {
                            Id = new Guid("0371a0dc-3f67-48a4-a9ac-3afd4efb4a1a"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8620),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8634)
                        },
                        new
                        {
                            Id = new Guid("52321732-0d72-4482-96ab-ad940d73f1f9"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8662),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("f2467b5e-dbdc-49d0-bc8e-bb50ff7152c0"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8672)
                        },
                        new
                        {
                            Id = new Guid("8f8eaefd-5914-4d2a-8d67-e35ab3e075d8"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8706),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("b5ab8629-0325-4957-8d14-90c0958a1237"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8715)
                        },
                        new
                        {
                            Id = new Guid("82bbd4a1-0314-437c-b6fe-83cd003e8fa5"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8792),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("b5ab8629-0325-4957-8d14-90c0958a1237"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8802)
                        },
                        new
                        {
                            Id = new Guid("53f3a12d-141e-473e-a207-0642204315fd"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8830),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("b5ab8629-0325-4957-8d14-90c0958a1237"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8845)
                        },
                        new
                        {
                            Id = new Guid("f0be4314-a4ec-4049-af56-a022cd66f6d8"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8873),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("b5ab8629-0325-4957-8d14-90c0958a1237"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8887)
                        },
                        new
                        {
                            Id = new Guid("3f1dfc4b-5f08-44ba-94bb-c55a2f1a3e42"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8916),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("2953a775-a8e5-4221-aa90-76f67de9fc25"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8925)
                        },
                        new
                        {
                            Id = new Guid("9bdbfaef-3b6f-453f-8d56-9c3de4249121"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8958),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("2953a775-a8e5-4221-aa90-76f67de9fc25"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8967)
                        },
                        new
                        {
                            Id = new Guid("771815de-e477-42b7-8d4d-cad22747c952"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(8996),
                            Description = "Media collection",
                            MainCategoryId = new Guid("2953a775-a8e5-4221-aa90-76f67de9fc25"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9011)
                        },
                        new
                        {
                            Id = new Guid("88cdf987-c7a8-420a-a4ac-94fa99a25d40"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9040),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("862b0000-7d7c-48e7-be79-10d23a400ab4"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9055)
                        },
                        new
                        {
                            Id = new Guid("1822290d-4e1e-45be-80e0-9a82678c17c4"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9083),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("862b0000-7d7c-48e7-be79-10d23a400ab4"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9092)
                        },
                        new
                        {
                            Id = new Guid("5b5eddc5-7f59-49fe-b94c-44aa28a86922"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9126),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("862b0000-7d7c-48e7-be79-10d23a400ab4"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9135)
                        },
                        new
                        {
                            Id = new Guid("9a9b7791-886c-4b8d-bd5d-4f826235f823"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9169),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("862b0000-7d7c-48e7-be79-10d23a400ab4"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9178)
                        },
                        new
                        {
                            Id = new Guid("31513b82-1374-4f1f-9eca-edf159b81063"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9211),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("a0e69d49-e7de-402e-8590-8552d69c07f8"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9221)
                        },
                        new
                        {
                            Id = new Guid("e08400d8-3998-4aae-b2e5-041b093e405c"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9249),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("a0e69d49-e7de-402e-8590-8552d69c07f8"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9263)
                        },
                        new
                        {
                            Id = new Guid("14c383ba-c427-42cd-b072-3dc596c8936a"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9292),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("a0e69d49-e7de-402e-8590-8552d69c07f8"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9306)
                        },
                        new
                        {
                            Id = new Guid("36d2f721-a80f-4377-b0a5-b2f385759d72"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9336),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("a0e69d49-e7de-402e-8590-8552d69c07f8"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9345)
                        },
                        new
                        {
                            Id = new Guid("d0f4b861-a4d2-4e7a-8d52-8c82e753327b"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9379),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("f5952b36-6c30-400b-98d4-ffee8329d0da"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9389)
                        },
                        new
                        {
                            Id = new Guid("1f597dd5-8742-4443-9e71-e4ebb6cadd94"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9417),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("f5952b36-6c30-400b-98d4-ffee8329d0da"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9431)
                        },
                        new
                        {
                            Id = new Guid("bdd2f1f5-1acb-4f62-aaad-79bee683a3c8"),
                            CreatedAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9459),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("f5952b36-6c30-400b-98d4-ffee8329d0da"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 20, 15, 8, 40, 399, DateTimeKind.Utc).AddTicks(9473)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dc69c964-c1fd-46e0-a09c-01a50a5e8055",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f72dde1e-f637-48a6-9b66-232f9e791a47",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c922ec14-c8b7-4ecc-8cb5-c8444adc4596",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
