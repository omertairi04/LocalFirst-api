// <auto-generated />
using System;
using Local_Alternatives.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Local_Alternatives.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020140958_Final")]
    partial class Final
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Local_Alternatives.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe51dce7-51ea-482c-8566-b7a699caacc0"),
                            Country = "North Macedonia",
                            Name = "Skopje",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("bc8c23e3-ffb5-43f2-bbee-65909ba82391"),
                            Country = "North Macedonia",
                            Name = "Kumanovo",
                            PrimaryCity = "Kumanovo"
                        },
                        new
                        {
                            Id = new Guid("1fe74dc7-76c4-412c-81df-fd7e4d45d5b3"),
                            Country = "North Macedonia",
                            Name = "Bitola",
                            PrimaryCity = "Bitola"
                        },
                        new
                        {
                            Id = new Guid("cb83a589-391a-48f6-b961-eded0604b2c0"),
                            Country = "North Macedonia",
                            Name = "Prilep",
                            PrimaryCity = "Prilep"
                        },
                        new
                        {
                            Id = new Guid("90f7a44d-7565-451e-86e5-9ac56308b28c"),
                            Country = "North Macedonia",
                            Name = "Tetovo",
                            PrimaryCity = "Tetovo"
                        },
                        new
                        {
                            Id = new Guid("00b49928-6f8c-4a01-879d-6cdbc604227d"),
                            Country = "North Macedonia",
                            Name = "Štip",
                            PrimaryCity = "Štip"
                        },
                        new
                        {
                            Id = new Guid("e888032d-cada-473d-9092-ef3e722bf16e"),
                            Country = "North Macedonia",
                            Name = "Veles",
                            PrimaryCity = "Veles"
                        },
                        new
                        {
                            Id = new Guid("e41188b1-28a7-4b77-a14c-b8700b7937e8"),
                            Country = "North Macedonia",
                            Name = "Ohrid",
                            PrimaryCity = "Ohrid"
                        },
                        new
                        {
                            Id = new Guid("5c2c8855-b781-40d9-81be-854fc8253164"),
                            Country = "North Macedonia",
                            Name = "Strumica",
                            PrimaryCity = "Strumica"
                        },
                        new
                        {
                            Id = new Guid("fd2ddc08-65c3-4337-a45a-de72a6b84a7e"),
                            Country = "North Macedonia",
                            Name = "Gostivar",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("5811e4b5-bf53-4460-ab11-a90a60e905ab"),
                            Country = "North Macedonia",
                            Name = "Kočani",
                            PrimaryCity = "Kočani"
                        },
                        new
                        {
                            Id = new Guid("ab15dcaa-9669-46ac-a81f-45bbfd041626"),
                            Country = "North Macedonia",
                            Name = "Dračevo",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("01b08def-a699-4675-b8f1-e22545e33a7f"),
                            Country = "North Macedonia",
                            Name = "Struga",
                            PrimaryCity = "Struga"
                        },
                        new
                        {
                            Id = new Guid("0b991aeb-949e-453d-8caa-82c8ec40190a"),
                            Country = "North Macedonia",
                            Name = "Debar",
                            PrimaryCity = "Debar"
                        },
                        new
                        {
                            Id = new Guid("4fd05833-61bb-4ee4-88cc-a36dd98dfb95"),
                            Country = "North Macedonia",
                            Name = "Kriva Palanka",
                            PrimaryCity = "Kriva Palanka"
                        },
                        new
                        {
                            Id = new Guid("0d932ae8-8381-476d-85d0-735b31f319c3"),
                            Country = "North Macedonia",
                            Name = "Negotino",
                            PrimaryCity = "Negotino"
                        },
                        new
                        {
                            Id = new Guid("b5388323-7c85-4a06-bfa9-a7b5e655ab73"),
                            Country = "North Macedonia",
                            Name = "Sveti Nikole",
                            PrimaryCity = "Sveti Nikole"
                        },
                        new
                        {
                            Id = new Guid("d1e8e798-cc81-4013-8314-8c68f63aefc8"),
                            Country = "North Macedonia",
                            Name = "Probištip",
                            PrimaryCity = "Probištip"
                        },
                        new
                        {
                            Id = new Guid("aa52b573-ee45-4ef7-8fd7-1855355e6df6"),
                            Country = "North Macedonia",
                            Name = "Delčevo",
                            PrimaryCity = "Delčevo"
                        },
                        new
                        {
                            Id = new Guid("c1acca7c-d010-446c-b441-ff96c4e52d4c"),
                            Country = "North Macedonia",
                            Name = "Vinica",
                            PrimaryCity = "Vinica"
                        },
                        new
                        {
                            Id = new Guid("82f736da-905d-4f93-bcce-3f0bfbbff617"),
                            Country = "North Macedonia",
                            Name = "Aračinovo",
                            PrimaryCity = "Aračinovo"
                        },
                        new
                        {
                            Id = new Guid("1a63cd62-f1f7-4a18-a64a-4a25b52421a2"),
                            Country = "North Macedonia",
                            Name = "Kičevo",
                            PrimaryCity = "Kičevo"
                        },
                        new
                        {
                            Id = new Guid("8f38af96-656c-42d6-83f0-58fb07037cbd"),
                            Country = "North Macedonia",
                            Name = "Kavadarci",
                            PrimaryCity = "Kavadarci"
                        },
                        new
                        {
                            Id = new Guid("03cd3b2b-ab40-4ed6-b6ba-77900997b59a"),
                            Country = "North Macedonia",
                            Name = "Berovo",
                            PrimaryCity = "Berovo"
                        },
                        new
                        {
                            Id = new Guid("654eaad8-4e4c-4bfb-a005-9ad97fa7202e"),
                            Country = "North Macedonia",
                            Name = "Kratovo",
                            PrimaryCity = "Kratovo"
                        },
                        new
                        {
                            Id = new Guid("7a7d659e-c079-49b6-9a34-460b449eb7ea"),
                            Country = "North Macedonia",
                            Name = "Gevgelija",
                            PrimaryCity = "Gevgelija"
                        },
                        new
                        {
                            Id = new Guid("9764f16a-591c-47bc-b087-99e9dceb6851"),
                            Country = "North Macedonia",
                            Name = "Vrapčište",
                            PrimaryCity = "Vrapčište"
                        },
                        new
                        {
                            Id = new Guid("65281569-35cb-42dc-b55d-b9dde9f6a444"),
                            Country = "North Macedonia",
                            Name = "Radoviš",
                            PrimaryCity = "Radoviš"
                        },
                        new
                        {
                            Id = new Guid("c2a6a7e4-678a-4acc-a802-c56752c762e5"),
                            Country = "North Macedonia",
                            Name = "Kruševo",
                            PrimaryCity = "Kruševo"
                        },
                        new
                        {
                            Id = new Guid("4163c41d-2dc9-4d6b-bc46-440ff617ae93"),
                            Country = "North Macedonia",
                            Name = "Čegrane",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("54f028d6-84c1-42a8-867a-6cfd3b7ea67a"),
                            Country = "North Macedonia",
                            Name = "Makedonski Brod",
                            PrimaryCity = "Makedonski Brod"
                        },
                        new
                        {
                            Id = new Guid("fb2ef433-9b6c-4da5-a88a-925db7a770d7"),
                            Country = "North Macedonia",
                            Name = "Demir Kapija",
                            PrimaryCity = "Demir Kapija"
                        },
                        new
                        {
                            Id = new Guid("3de95a7b-6bc8-4f1c-bdc1-e5146eefcc44"),
                            Country = "North Macedonia",
                            Name = "Kučevište",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("4aeed20a-b72b-4289-960a-334333d87a53"),
                            Country = "North Macedonia",
                            Name = "Tearce",
                            PrimaryCity = "Tearce"
                        },
                        new
                        {
                            Id = new Guid("53facb02-381c-4581-b415-0684fa23c166"),
                            Country = "North Macedonia",
                            Name = "Bogdanci",
                            PrimaryCity = "Bogdanci"
                        },
                        new
                        {
                            Id = new Guid("9d092d11-415b-420d-b8ae-bbab3b96e715"),
                            Country = "North Macedonia",
                            Name = "Forino",
                            PrimaryCity = "Gostivar"
                        },
                        new
                        {
                            Id = new Guid("dc887b63-6d9b-4814-b1dc-0a23c4afa0c2"),
                            Country = "North Macedonia",
                            Name = "Rašče",
                            PrimaryCity = "Skopje"
                        },
                        new
                        {
                            Id = new Guid("97f1e18e-1bf0-46e4-a1b9-e1b8917a62df"),
                            Country = "North Macedonia",
                            Name = "Rosoman",
                            PrimaryCity = "Rosoman"
                        },
                        new
                        {
                            Id = new Guid("289fd7f8-4012-41c0-9b77-d79a8bf6752e"),
                            Country = "North Macedonia",
                            Name = "Demir Hisar",
                            PrimaryCity = "Demir Hisar"
                        },
                        new
                        {
                            Id = new Guid("2b6e0ac2-1c39-47bc-ae37-c3a6fd78c825"),
                            Country = "North Macedonia",
                            Name = "Vevčani",
                            PrimaryCity = "Vevčani"
                        },
                        new
                        {
                            Id = new Guid("4a6698a1-62fe-477a-aea9-89cc9939ad2e"),
                            Country = "North Macedonia",
                            Name = "Gradsko",
                            PrimaryCity = "Gradsko"
                        },
                        new
                        {
                            Id = new Guid("dbc56cfb-0520-4976-87ac-9de4f39086c5"),
                            Country = "North Macedonia",
                            Name = "Valandovo",
                            PrimaryCity = "Valandovo"
                        },
                        new
                        {
                            Id = new Guid("3d10c667-1468-4efd-bd0d-e5eec9c50e96"),
                            Country = "North Macedonia",
                            Name = "Krivogaštani",
                            PrimaryCity = "Krivogaštani"
                        },
                        new
                        {
                            Id = new Guid("b1b83b85-4ffa-4b68-a155-5e1e3512f8d7"),
                            Country = "North Macedonia",
                            Name = "Pehčevo",
                            PrimaryCity = "Pehčevo"
                        },
                        new
                        {
                            Id = new Guid("0cffc736-d211-4370-9ff3-de68bec3d4f0"),
                            Country = "North Macedonia",
                            Name = "Plasnica",
                            PrimaryCity = "Plasnica"
                        },
                        new
                        {
                            Id = new Guid("832139c2-4d94-48a5-8703-ffedb5652e90"),
                            Country = "North Macedonia",
                            Name = "Zrnovci",
                            PrimaryCity = "Zrnovci"
                        },
                        new
                        {
                            Id = new Guid("16b71c93-31e0-4da6-a8ea-7e513c2b3d29"),
                            Country = "North Macedonia",
                            Name = "Novaci",
                            PrimaryCity = "Novaci"
                        },
                        new
                        {
                            Id = new Guid("f64bb176-1443-420f-ae02-1fcb2f957ed1"),
                            Country = "North Macedonia",
                            Name = "Bosilovo",
                            PrimaryCity = "Bosilovo"
                        },
                        new
                        {
                            Id = new Guid("64f02006-6c4b-4673-a6cd-fb828cfda698"),
                            Country = "North Macedonia",
                            Name = "Mogila",
                            PrimaryCity = "Mogila"
                        },
                        new
                        {
                            Id = new Guid("f87bc813-399c-4f9d-a9e0-7afe9017e681"),
                            Country = "North Macedonia",
                            Name = "Novo Selo",
                            PrimaryCity = "Novo Selo"
                        },
                        new
                        {
                            Id = new Guid("6b14999e-99ed-4040-9601-fc2d5abbc884"),
                            Country = "North Macedonia",
                            Name = "Konče",
                            PrimaryCity = "Konče"
                        },
                        new
                        {
                            Id = new Guid("af1968bf-5ba6-4aa7-b19b-08c73326c364"),
                            Country = "North Macedonia",
                            Name = "Rostuša",
                            PrimaryCity = "Mavrovo i Rostuše"
                        },
                        new
                        {
                            Id = new Guid("faa20f22-aaf9-455c-b706-a026a4b8c46c"),
                            Country = "North Macedonia",
                            Name = "Jegunovce",
                            PrimaryCity = "Jegunovce"
                        },
                        new
                        {
                            Id = new Guid("1e40aeba-25ab-4665-bb79-30fe1fc51188"),
                            Country = "North Macedonia",
                            Name = "Rankovce",
                            PrimaryCity = "Rankovce"
                        },
                        new
                        {
                            Id = new Guid("63a705b3-0946-421c-a027-6673d468c236"),
                            Country = "North Macedonia",
                            Name = "Sopište",
                            PrimaryCity = "Sopište"
                        },
                        new
                        {
                            Id = new Guid("70c3429f-8a59-4432-83d3-09934af7bd3e"),
                            Country = "North Macedonia",
                            Name = "Obleševo",
                            PrimaryCity = "Češinovo-Obleševo"
                        },
                        new
                        {
                            Id = new Guid("5614cf41-8f25-4868-ade4-ba3d64d3577f"),
                            Country = "North Macedonia",
                            Name = "Vasilevo",
                            PrimaryCity = "Vasilevo"
                        },
                        new
                        {
                            Id = new Guid("1c7615aa-9af3-4c1e-a100-06ea15edbd83"),
                            Country = "North Macedonia",
                            Name = "Karbinci",
                            PrimaryCity = "Karbinci"
                        },
                        new
                        {
                            Id = new Guid("5aa41822-3f4e-4791-b75a-6114017b6f5c"),
                            Country = "North Macedonia",
                            Name = "Lozovo",
                            PrimaryCity = "Lozovo"
                        },
                        new
                        {
                            Id = new Guid("4a70b3e0-5bb7-4896-b686-201b19c3c3c6"),
                            Country = "North Macedonia",
                            Name = "Staro Nagoričane",
                            PrimaryCity = "Staro Nagoričane"
                        },
                        new
                        {
                            Id = new Guid("da824f55-da47-40eb-beb3-b3364e163181"),
                            Country = "North Macedonia",
                            Name = "Brvenica",
                            PrimaryCity = "Brvenica"
                        },
                        new
                        {
                            Id = new Guid("604ed3c8-9d74-45ad-844e-510126629ee1"),
                            Country = "North Macedonia",
                            Name = "Centar Župa",
                            PrimaryCity = "Centar Župa"
                        },
                        new
                        {
                            Id = new Guid("b6ece68d-9e6d-4733-9225-e6a220136947"),
                            Country = "North Macedonia",
                            Name = "Dolneni",
                            PrimaryCity = "Dolneni"
                        },
                        new
                        {
                            Id = new Guid("7292e215-2c9c-4fd3-9bd5-aea18b30c9ff"),
                            Country = "North Macedonia",
                            Name = "Belčišta",
                            PrimaryCity = "Debarca"
                        },
                        new
                        {
                            Id = new Guid("90be8940-56ca-4cd7-9f0e-8a8de208c677"),
                            Country = "North Macedonia",
                            Name = "Čučer-Sandevo",
                            PrimaryCity = "Čučer-Sandevo"
                        },
                        new
                        {
                            Id = new Guid("7e807b32-5dcc-49d4-a7c5-ed3b76aa7755"),
                            Country = "North Macedonia",
                            Name = "Zelenikovo",
                            PrimaryCity = "Zelenikovo"
                        },
                        new
                        {
                            Id = new Guid("3d115946-7611-43eb-8151-073f424b89dd"),
                            Country = "North Macedonia",
                            Name = "Petrovec",
                            PrimaryCity = "Petrovec"
                        },
                        new
                        {
                            Id = new Guid("cef42d2b-0e74-46f3-8132-800a970ca833"),
                            Country = "North Macedonia",
                            Name = "Želino",
                            PrimaryCity = "Želino"
                        },
                        new
                        {
                            Id = new Guid("0013bbf3-9f0c-4e8b-9e4a-022587ab7283"),
                            Country = "North Macedonia",
                            Name = "Star Dojran",
                            PrimaryCity = "Dojran"
                        },
                        new
                        {
                            Id = new Guid("ca8998fe-ff94-44dd-834a-5b4316099eb2"),
                            Country = "North Macedonia",
                            Name = "Studeničani",
                            PrimaryCity = "Studeničani"
                        },
                        new
                        {
                            Id = new Guid("2bf91ed5-61b3-4977-b008-25e0c0c30749"),
                            Country = "North Macedonia",
                            Name = "Bogovinje",
                            PrimaryCity = "Bogovinje"
                        },
                        new
                        {
                            Id = new Guid("c37e7e45-8e49-41b5-a4c7-b53c99da4399"),
                            Country = "North Macedonia",
                            Name = "Ilinden",
                            PrimaryCity = "Ilinden"
                        },
                        new
                        {
                            Id = new Guid("c7481a87-c89a-4cee-869a-faa24aaf2d07"),
                            Country = "North Macedonia",
                            Name = "Lipkovo",
                            PrimaryCity = "Lipkovo"
                        },
                        new
                        {
                            Id = new Guid("943f1425-9b6e-4ec4-86d6-0149b1f12587"),
                            Country = "North Macedonia",
                            Name = "Makedonska Kamenica",
                            PrimaryCity = "Makedonska Kamenica"
                        },
                        new
                        {
                            Id = new Guid("29a7acbe-80e7-4595-865f-0d5bc76ec8f3"),
                            Country = "North Macedonia",
                            Name = "Resen",
                            PrimaryCity = "Resen"
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9808),
                            Description = "Apparel and accessories",
                            Name = "Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9817)
                        },
                        new
                        {
                            Id = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9852),
                            Description = "Every day house hold items",
                            Name = "Household Items",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9861)
                        },
                        new
                        {
                            Id = new Guid("30201f35-f99f-4422-adc5-4713af8c7a89"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9889),
                            Description = "Electronics",
                            Name = "Electronics",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9903)
                        },
                        new
                        {
                            Id = new Guid("b6fb6e82-9c28-48f9-aa6c-2af5c29c649f"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9932),
                            Description = "Donate your books or medias.",
                            Name = "Books and Media",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9947)
                        },
                        new
                        {
                            Id = new Guid("4976ca98-cb1e-4aed-b64c-8c4d42ee5bfb"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9975),
                            Description = "Donate your Toys and Games.",
                            Name = "Toys and Games",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 371, DateTimeKind.Utc).AddTicks(9984)
                        },
                        new
                        {
                            Id = new Guid("ecc60cac-1ffb-4aa4-b8f7-773f0ec6a389"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(12),
                            Description = "Donate your sport or fitness equipment.",
                            Name = "Sports of Fitness Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(26)
                        },
                        new
                        {
                            Id = new Guid("0d0dc453-ba0c-4432-8b07-3988c0beb653"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(55),
                            Description = "Donate your food and groceries.",
                            Name = "Food and Groceries",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(70)
                        });
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b343a6d-e64f-4244-8126-7d1e022326a7"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(246),
                            Description = "Apparel for men",
                            MainCategoryId = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            Name = "Men's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(256)
                        },
                        new
                        {
                            Id = new Guid("9fb637ca-3f75-46a6-90e0-2192509acc9f"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(285),
                            Description = "Apparel for women",
                            MainCategoryId = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            Name = "Women's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(299)
                        },
                        new
                        {
                            Id = new Guid("b86af2b6-9f78-484f-8dba-38b877c52eda"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(327),
                            Description = "Apparel for children",
                            MainCategoryId = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            Name = "Children's Clothing",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(341)
                        },
                        new
                        {
                            Id = new Guid("0c062b2f-1feb-4bc0-90c5-4ddd42d17b61"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(370),
                            Description = "Footwear for all",
                            MainCategoryId = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            Name = "Shoes & Footwear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(380)
                        },
                        new
                        {
                            Id = new Guid("dc690059-62e7-4dd4-9334-31bfd740896e"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(413),
                            Description = "Hats, scarves, belts, etc.",
                            MainCategoryId = new Guid("3c043b1b-3947-470d-8ddc-2c127de2f7b1"),
                            Name = "Accessories",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(423)
                        },
                        new
                        {
                            Id = new Guid("2ce1a55b-898a-473c-900c-7a8930085d45"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(452),
                            Description = "Household furniture",
                            MainCategoryId = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            Name = "Furniture",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(466)
                        },
                        new
                        {
                            Id = new Guid("4d4c9af7-d6c7-4f84-b5d8-57c94f87f668"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(496),
                            Description = "Utensils and appliances for the kitchen",
                            MainCategoryId = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            Name = "Kitchenware",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(505)
                        },
                        new
                        {
                            Id = new Guid("9669e61f-0032-4f69-8ca5-26c6d6727d25"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(537),
                            Description = "Bedding essentials",
                            MainCategoryId = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            Name = "Bedding & Linens",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(547)
                        },
                        new
                        {
                            Id = new Guid("6aad5578-712d-448d-9a64-69346bd36808"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(580),
                            Description = "Cleaning essentials",
                            MainCategoryId = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            Name = "Cleaning Supplies",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(589)
                        },
                        new
                        {
                            Id = new Guid("7d0cba1f-39c9-4211-9621-56ac0975e905"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(618),
                            Description = "Decorative items for the home",
                            MainCategoryId = new Guid("57fcd2f6-e796-4f24-865b-d85fc43ced2e"),
                            Name = "Home Décor",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(632)
                        },
                        new
                        {
                            Id = new Guid("d6af5fb9-8c5d-4e84-ba1c-966c6fbe6765"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(661),
                            Description = "Computers and laptops",
                            MainCategoryId = new Guid("30201f35-f99f-4422-adc5-4713af8c7a89"),
                            Name = "Computers & Laptops",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(675)
                        },
                        new
                        {
                            Id = new Guid("0f976dd8-dda7-474b-a9e3-8a474fa0b659"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(704),
                            Description = "Smartphones and tablets",
                            MainCategoryId = new Guid("30201f35-f99f-4422-adc5-4713af8c7a89"),
                            Name = "Mobile Phones & Tablets",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(718)
                        },
                        new
                        {
                            Id = new Guid("3f27f640-6950-4d5b-a9f9-cc954753a509"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(747),
                            Description = "Appliances for home use",
                            MainCategoryId = new Guid("30201f35-f99f-4422-adc5-4713af8c7a89"),
                            Name = "Home Appliances",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(757)
                        },
                        new
                        {
                            Id = new Guid("0f767cb3-9809-451e-a849-5fc8dea1f780"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(791),
                            Description = "Televisions and audio equipment",
                            MainCategoryId = new Guid("30201f35-f99f-4422-adc5-4713af8c7a89"),
                            Name = "TVs & Audio Systems",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(801)
                        },
                        new
                        {
                            Id = new Guid("e4221336-7336-481c-9415-1c844cdeb0a7"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(829),
                            Description = "Fiction, non-fiction, educational",
                            MainCategoryId = new Guid("b6fb6e82-9c28-48f9-aa6c-2af5c29c649f"),
                            Name = "Books",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(843)
                        },
                        new
                        {
                            Id = new Guid("4501be0d-a8c5-4e48-8f27-d1c18d41d5c8"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(871),
                            Description = "Various magazines",
                            MainCategoryId = new Guid("b6fb6e82-9c28-48f9-aa6c-2af5c29c649f"),
                            Name = "Magazines",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(885)
                        },
                        new
                        {
                            Id = new Guid("604e69c5-b384-4795-902f-69f44a4d2a2d"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(914),
                            Description = "Media collection",
                            MainCategoryId = new Guid("b6fb6e82-9c28-48f9-aa6c-2af5c29c649f"),
                            Name = "CDs, DVDs, Blu-rays",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(928)
                        },
                        new
                        {
                            Id = new Guid("e98b5af5-f12a-4091-81dc-825acfb27bf1"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(956),
                            Description = "Games for fun and challenges",
                            MainCategoryId = new Guid("4976ca98-cb1e-4aed-b64c-8c4d42ee5bfb"),
                            Name = "Board Games & Puzzles",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(966)
                        },
                        new
                        {
                            Id = new Guid("5c10478e-3e33-40a5-9b76-3ab76e520926"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(995),
                            Description = "Toys for young children",
                            MainCategoryId = new Guid("4976ca98-cb1e-4aed-b64c-8c4d42ee5bfb"),
                            Name = "Baby & Toddler Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1009)
                        },
                        new
                        {
                            Id = new Guid("64c28549-cbc5-4736-8e61-4fb655498145"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1037),
                            Description = "Toys that promote learning",
                            MainCategoryId = new Guid("4976ca98-cb1e-4aed-b64c-8c4d42ee5bfb"),
                            Name = "Educational Toys",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1052)
                        },
                        new
                        {
                            Id = new Guid("3842b568-4208-44e7-a283-4fbe17785b00"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1081),
                            Description = "Gaming systems and games",
                            MainCategoryId = new Guid("4976ca98-cb1e-4aed-b64c-8c4d42ee5bfb"),
                            Name = "Video Games & Consoles",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1091)
                        },
                        new
                        {
                            Id = new Guid("7e45a56d-8438-403d-a6b0-69e5491c0268"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1120),
                            Description = "Equipment for gym workouts",
                            MainCategoryId = new Guid("ecc60cac-1ffb-4aa4-b8f7-773f0ec6a389"),
                            Name = "Gym Equipment",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1135)
                        },
                        new
                        {
                            Id = new Guid("045348a0-1da3-4e25-a810-4d69cfc5d6d6"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1162),
                            Description = "Gear for various sports",
                            MainCategoryId = new Guid("ecc60cac-1ffb-4aa4-b8f7-773f0ec6a389"),
                            Name = "Sports Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1172)
                        },
                        new
                        {
                            Id = new Guid("8df451b6-6e8d-4700-80c6-50a4db4657b8"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1205),
                            Description = "Bicycles and scooters for all ages",
                            MainCategoryId = new Guid("ecc60cac-1ffb-4aa4-b8f7-773f0ec6a389"),
                            Name = "Bicycles & Scooters",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1219)
                        },
                        new
                        {
                            Id = new Guid("dcbeb935-42d9-4155-a7a9-cb0569abef8e"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1242),
                            Description = "Equipment for outdoor activities",
                            MainCategoryId = new Guid("ecc60cac-1ffb-4aa4-b8f7-773f0ec6a389"),
                            Name = "Camping & Outdoor Gear",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1257)
                        },
                        new
                        {
                            Id = new Guid("4df02e6b-cef8-4b0f-8e3c-459ce7bf2290"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1285),
                            Description = "Canned food items",
                            MainCategoryId = new Guid("0d0dc453-ba0c-4432-8b07-3988c0beb653"),
                            Name = "Canned Goods",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1295)
                        },
                        new
                        {
                            Id = new Guid("2d911134-3d08-4819-b4fe-591741966754"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1324),
                            Description = "Non-perishable food products",
                            MainCategoryId = new Guid("0d0dc453-ba0c-4432-8b07-3988c0beb653"),
                            Name = "Non-Perishable Items",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1338)
                        },
                        new
                        {
                            Id = new Guid("8e81f7b7-413e-41c6-b543-44daa77ee80a"),
                            CreatedAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1367),
                            Description = "Food and formula for infants",
                            MainCategoryId = new Guid("0d0dc453-ba0c-4432-8b07-3988c0beb653"),
                            Name = "Baby Food & Formula",
                            UpdateAt = new DateTime(2024, 10, 20, 14, 9, 58, 372, DateTimeKind.Utc).AddTicks(1382)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "569a6003-4d9a-4ed4-b3ee-63825510f630",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f98ca047-8223-45a9-8b13-e3039a3116cd",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "ba5a5462-b652-4e42-aa0a-fab249726f07",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasBaseType("Local_Alternatives.Models.AppUser");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("CityId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("NormalUser_Address");

                            t.Property("CityId")
                                .HasColumnName("NormalUser_CityId");

                            t.Property("CreatedAt")
                                .HasColumnName("NormalUser_CreatedAt");

                            t.Property("Name")
                                .HasColumnName("NormalUser_Name");

                            t.Property("UpdatedAt")
                                .HasColumnName("NormalUser_UpdatedAt");
                        });

                    b.HasDiscriminator().HasValue("NormalUser");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Local_Alternatives.Models.ProductSubCategories", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.SubCategory", "SubCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.HasOne("Local_Alternatives.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Local_Alternatives.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.NormalUser", b =>
                {
                    b.HasOne("Local_Alternatives.Models.Cities", "City")
                        .WithMany("NormalUsers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Cities", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("NormalUsers");
                });

            modelBuilder.Entity("Local_Alternatives.Models.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Product", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.SubCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("Local_Alternatives.Models.Company", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
